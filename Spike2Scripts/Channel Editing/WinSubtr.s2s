'Script to delete events in an event channel in time windows defined by burststarts (00) and burstends (01) in a marker channel created with "mkbursts".
'You can extend or limit the window by adding time to the burststarts and/or burstends.

'dirk bucher

'----------------------------------------
if ViewKind() <> 0 then		'checks if the associated window is a time view...
   Message("This isn't a time view!");
  	FrontView (App (3));		'brings script to front...
	FileClose (0);				'...and closes it
endif

'----------------------------------------

WindowVisible (3);		'sets the time view to the front

'----------------------------------------

var ok%, cur1, cur2, wholefile%;	'sets variable expressions

if Cursor (1) <> 0 and Cursor (2)/Cursor (1)<1 or Cursor (1)=-1 or Cursor (2)=-1 then ' if Cursor (1) and Cursor (2) are not present or not in the right
																						'order....

DlgCreate ("ATTENTION!");			
	DlgText ("Cursor (1) and (2) not set correctly.",2,1);
	DlgLabel	(1, "Process whole file?",2,2);								'...choose if you want to analyse the whole file
	ok%:=DlgShow (wholefile%);

	if ok%=1 then																	'sets analysis to whole file or...
		cur1:= 0;														
		cur2:=MaxTime ();
	else
  		FrontView (App (3));		'brings script to front...
		FileClose (0);				'...and closes it
	endif

else
	cur1 := Cursor(1);															'if present and in the right order, get cursor times	
	cur2 := Cursor(2);
endif

'-------------------------------------------------------------------------------

var eventch%, markerch%, output%, name$, t1, t2, ok2%;

DlgCreate ("Select");
DlgChan (1, "Event Channel:",2);												'(mark peaks, troughs, data rising or falling through a level).
DlgChan (2, "Burst Channel:",8);
DlgChan (3, "Output channel:",128);
DlgString (4, "Name of new channel", 20);
DlgReal (5, "time added to burst start [ms]:", -200,200);
DlgReal (6, "time added to burst end [ms]:", -200,200);
name$:= "new name...";
ok2%:=DlgShow (eventch%, markerch%, output%, name$, t1, t2);

if ok2%=1 then				'if "OK" was clicked...

t1:=t1/1000;
t2:=t2/1000;

var burststart[10000], burstend[10000], nburststart%; 

'puts burst starts and ends into seperate arrays:
MarkMask(markerch%,-1,1,-1); 'reset = include all codes
MarkMask(markerch%,0,-1,-1);	'set all codes off
MarkMask(markerch%,0,1,0);		'turn on code 0 = burst start only

nburststart%:=ChanData(markerch%, burststart [], cur1, cur2); 'put all burst starts into an array

MarkMask(markerch%,-1,1,-1); 'reset = include all codes
MarkMask(markerch%,0,-1,-1);	'set all codes off
MarkMask(markerch%,0,1,1);		'turn on code 1=end code only

ChanData(markerch%, burstend[], cur1, cur2); 'put all burst ends into an array

MarkMask(markerch%,-1,1,-1);	'turn on both markers again

var dummychan%;

dummychan%:= MemChan(2); 'new buffer channel is created

MemImport(dummychan%, eventch%, cur1, cur2); 'event channel is imported into buffer channel


var j%;

for j% := 0 to nburststart%-1 step 1 do 'loop through all bursts

MemDeleteTime(dummychan%, 3, burststart [j%] + t1 , burstend [j%] + t2); 'delete events in that time window

next


MemSave(dummychan%,output%, 0, 0);	'saves buffer channel to a real channel
	ChanDelete(dummychan%, 0);				'deletes the buffer channel
	ChanShow(output%);				'shows new channel
	ChanTitle$(output%,name$);		'names new channel
	DrawMode(output%,2);				'sets channel draw mode to "lines"

endif

FrontView (App (3));		'brings script to front...
FileClose (0);				'...and closes it



