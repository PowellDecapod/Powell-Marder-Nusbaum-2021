'"nSpks" Script to plot the number of spikes per burst into a time view channel. You need an event channel holding the spike times
'and a marker channel holding burst starts and ends.

'Dirk Bucher Sept 2012

if ViewKind() <> 0 then		'checks if the associated window is a time view...
   Message("This isn't a time view!");
	FrontView (App (3));		'brings script to front...
	FileClose (0);				'...and closes it
endif

WindowVisible (3);		'sets the time view to the front

var ok%, cur1, cur2, wholefile%;	'sets variable expressions	

if Cursor (2)<Cursor (1) or Cursor (1)=-1 or Cursor (2)=-1 then ' if Cursor (1) and Cursor (2) are not present or not in the right
																						'order....
	DlgCreate ("ATTENTION!");			
	DlgText ("Cursor (1) and (2) not set correctly.",2,1);
	DlgLabel	(1, "Analyse whole file?",2,2);								'...choose if you want to analyse the whole file
	ok%:=DlgShow (wholefile%);

	if ok%=1 then																	'sets analysis to whole file or...
		cur1:= 0;														
		cur2:=MaxTime ();
	else
  	FrontView (App (3));		'brings script to front...
	FileClose (0);				'...and closes it
	endif

else
	cur1 := Cursor(1);															'if present and in the right order, get cursor times	
	cur2 := Cursor(2);
endif

var spkch%, burstch%, outch%;

DlgCreate("Select");
DlgChan(1,"spk channel:",2);
DlgChan(2,"train marker channel:",8);
DlgChan(3,"New channel:",128);
ok%:=DlgShow(spkch%, burstch%, outch%);
if ok%<>1 then
    FrontView(App(3));
    FileClose(0);
endif

var bchTitle$;
bchTitle$:=ChanTitle$(burstch%);


var nTrainstart%, trainstart[3000], trainend[3000];
MarkMask(burstch%,-1,1,-1); 'reset = include all codes
MarkMask(burstch%,0,-1,-1);	'set all codes off
MarkMask(burstch%,0,1,0);		'turn on code 0 = burst start only

nTrainstart%:=ChanData(burstch%, trainstart [], cur1, cur2); 'put all burst starts into an array

MarkMask(burstch%,-1,1,-1);	'turn on both markers again
MarkMask(burstch%,0,-1,-1);	'set all codes off
MarkMask(burstch%,0,1,1);		'turn on code 1=end code only

ChanData(burstch%, trainend[], cur1, cur2); 'put all burst ends into an array

MarkMask(burstch%,-1,1,-1);	'turn on both markers again


var mch%, j%, nSpks, spks[200], nSpkArr[1], code%[1];

mch%:=MemChan(7,1);

for j%:=0 to nTrainstart%-1 step 1 do
    if j%=nTrainstart%-1 then
        nspks:=ChanData(spkch%,spks[],trainstart[j%],trainend[j%]+0.0001);
        nSpkArr[0]:=nSpks;
    else
        nSpks:=ChanData(spkch%,spks[],trainstart[j%], trainstart[j%+1]);
        nSpkArr[0]:=nSpks;
    endif
    MemSetItem(mch%,0,trainstart[j%],code%[],nSpkArr[0:1]);
next

MemSave(mch%, outch%,0,0);
ChanDelete(mch%,0);
ChanShow(outch%);
ChanTitle$(outch%,bchTitle$);
ChanUnits$(outch%,"nSpks");
DrawMode(outch%,3,3,0,1);
MarkShow(outch%,0,0);
Optimise(outch%);

    
FrontView (App (3));		'brings script to front...
FileClose (0);				'...and closes it