'Script to return PSP parameters for separate events. You need the waveform channel and an event channel that marks the times for
'single events. It does not matter if the event channel is generated from trigger signals or peak times etc., as long as it is consistent
'between consecutive events. You have to type in a time range with fixed distance from every event that is used to average the voltage to obtain the baseline.
'Then you set the time range where your signal of interest takes place.
'The script returns the following values:

'"#"	-	a trailing number for the events

'followed by a number of values that are not needed for analysis but good to check if everything was done correctly and makes sense. 
'They also allow to go back to the waveform channel and find individual events. 

'"stimTime [s]"	-	absolute time in the file where the event takes place
'"halfrise [s]"	-	absolute time where the signal reaches 1/2 amplitude in the rising phase
'"peakTime [s]"	-	absolute time where the signal peaks
'"halfdecay [s]"	-	absolute time where the signal reaches 1/2 amplitude in the decay
'"baseline [mV]"	-	average baseline voltage in the defined window before or after the signal
'"peak [mV]"		-	absolute peak voltage

'and finally the parameters for analysis:

'"amplitude [mV]"	-	derived from peak-baseline
'"ttp(1/2) [ms]"	-	time from half amplitude (rise) to peak
'"ttd(1/2) [ms]"	-	time from peak to half amplitude (decay)
'"duration@1/2amp [ms]"	-	derived from ttd-ttp
'"area above baseline [mV*ms]"	-	average voltage in the defined time window for the signal multiplied by the duration of that window

'Dirk Bucher, April 2002.
'--------------------------------------------------------------------------------------------

'setting the file to process

if ViewKind() <> 0 then		'checks if the associated window is a time view
   Message("This isn't a time view!");
   halt
endif

WindowVisible (3);		'sets the time view to the front

'--------------------------------------------------------------------------------------------

'setting the analysis time:

var ok%, cur1, cur2, wholefile%;	'sets variable expressions	

if Cursor (2)<Cursor (1) or Cursor (1)=-1 or Cursor (2)=-1 then ' if Cursor (1) and Cursor (2) are  not present or not in the right order...
																					 '	...a dialog is created to ask if you want to analyse the whole file.	
	DlgCreate ("ATTENTION!");
	DlgText ("Cursor (1) and (2) not set correctly.",2,1);
	DlgLabel	(1, "Analyse whole file?",2,2);
	ok%:=DlgShow (wholefile%);

	if ok%=1 then					'if you answer "ok",...
		cur1:= 0;					'...start and end are set to whole file									
		cur2:= MaxTime ();
	else								'if you answer "cancel",...
	halt								'...script is stopped.
	endif

else									' if Cursor (1) and Cursor (2) are present and in the right order...
	cur1 := Cursor(1);			'...their values are returned as start and end time.
	cur2 := Cursor(2);
endif

'-----------------------------------------------------------------------------------------------------------------------

'gets the filename of the time view for later use in printed header line

var fname$,fend$;						
fname$:=FileName$(3);							
fend$:=FileName$(4);
fname$:=fname$+fend$+".smr";

'-------------------------------------------------------------------------------------------------------------------------

var choose%;

choose%:=Query ("Select|Analyze:", "EPSPs_EJPs_IPSCs", "IPSPs_EJCs_EPSCs");

var stimch%, wavech%, time1, time2, time3, time4;

DlgCreate ("Analyse triggered PSPs");	
DlgText ("Assign channels:", 1,1);
DlgChan (1,"Waveform channel:", 513, 0, 2);
DlgChan (2,"Stimulus channel:", 10, 0, 3);
DlgText ("Define a time window to average the baseline:", 1,5);
DlgReal (3, "Start after stimulus [ms]", -20000,20000, 0, 6);
DlgReal (4, "End after stimulus [ms]", -20000,20000, 0, 7);
DlgText ("Define a time window for the response:", 1,9);
DlgReal (5, "Start after stimulus [ms]", -20000,20000, 0, 10);
DlgReal (6, "End after stimulus [ms]", -20000,20000, 0, 11);
DlgText ("", 1, 12);
time1:=-500;
time2:=-50;
time3:=0;
time4:=1000;

DlgShow (wavech%, stimch%, time1, time2, time3, time4);

if stimch%<1 or wavech%<1 then		'checks if both burstchannels are assigned and different from each other.
	Message ("No valid channel assignment!");						'if not, message pops up and...
	halt																		'...script is stopped
endif

if time1>=time2 or time3>=time4 then
	Message ("Invalid time windows!");
	halt
endif

PrintLog("DATAFILE= ",fname$,"  /  ","WAVEFORMCHANNEL= " , ChanTitle$(wavech%),"  /  ","TRIGGERCHANNEL= "
, ChanTitle$(stimch%)," /  " ,"START= ",cur1,"  /  ","END=", cur2);
Printlog ("\n");
Printlog ("#,"," stimTime [s],", " halfrise [s], ", " peakTime [s], "," halfdecay [s], ", " baseline [mV], ", " peak [mV], ",
"amplitude [mV], ",  "ttp(1/2) [ms],", "ttd(1/2) [ms], ","duration@1/2amp [ms], ","integral [mV*ms]");



var t1, t2, t3, t4;
t1:= time1/1000;
t2:= time2/1000;
t3:= time3/1000;
t4:= time4/1000;

var stimulus[10000], nStim%;
var j%;	'counter
 

nStim%:= ChanData (stimch%, stimulus[],cur1, cur2);


for j% := 0 to nStim%-1 step 1 do		' loop through all complete cycles

var baseline, Peak, peakT, halfamplitude, Amp, halfstart;
var halfend, halfwidth, HalfToPeak, PeakToHalf, area; 

baseline:= ChanMeasure (wavech%, 2, stimulus[j%]+t1,stimulus[j%]+t2);

if choose%=1 then
Peak:= ChanMeasure(wavech%, 8, stimulus[j%]+t3,stimulus[j%]+t4);
peakT:= ChanSearch(wavech% ,1, stimulus[j%]+t3, stimulus[j%]+t4);
else
Peak:= ChanMeasure(wavech%, 9, stimulus[j%]+t3,stimulus[j%]+t4);
peakT:= ChanSearch(wavech% ,2, stimulus[j%]+t3, stimulus[j%]+t4);

endif

Amp:= Peak-baseline;

halfamplitude:= baseline+(peak-baseline)/2;

if choose%=1 then
halfstart:= ChanSearch(wavech% ,7, stimulus[j%]+t3, peakT, halfamplitude,0);
halfend:= ChanSearch(wavech% ,8, peakT, stimulus[j%]+t4, halfamplitude,0);
else
halfstart:= ChanSearch(wavech% ,8, stimulus[j%]+t3, peakT, halfamplitude,0);
halfend:= ChanSearch(wavech% ,7, peakT, stimulus[j%]+t4, halfamplitude,0);
endif

halfwidth:= halfend-halfstart;
HalfToPeak:=peakT-halfstart;
PeakToHalf:=halfend-peakT;
area:= ((ChanMeasure (wavech%, 2, stimulus[j%]+t3,stimulus[j%]+t4))-baseline)*(time4-time3);

PrintLog ("%d,%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", j%+1, stimulus[j%], halfstart, peakT , halfend, baseline, Peak, Amp, HalfToPeak*1000, PeakToHalf*1000, halfwidth*1000, area);

next

Printlog ("\n"); 'add empty line
Frontview (LogHandle ()); 'bring log window to the front

FrontView (App (3));		'brings script to front...
FileClose (0);				'...and closes it


